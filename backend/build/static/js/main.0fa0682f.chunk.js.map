{"version":3,"sources":["graphql/mutations.js","components/Login.js","graphql/queries.js","components/PreviewCalendar.js","components/ChoiceCalendar.js","components/AddEvent.js","components/Events.js","components/EventCalendar.js","components/Event.js","components/AppWhenLoggedIn.js","App.js","index.js"],"names":["LOGIN","gql","ADD_EVENT","Login","setToken","useMutation","onError","error","console","log","login","result","useEffect","data","token","value","localStorage","setItem","initialValues","username","password","onSubmit","resetForm","variables","values","handleChange","handleBlur","handleSubmit","id","type","name","onChange","onBlur","USER_GROUPS","USER_EVENTS","EVENT","Header","month","setMonth","className","onClick","dateFns","Days","startDate","shortWeekDaysArray","Array","from","map","e","i","Cells","monthStart","monthEnd","endDate","rows","days","day","formattedDate","cloneDay","push","CalendarDate","useState","clicked","setClicked","onDateClick","PreviewCalendar","Date","setDates","dates","concat","ChoiceCalendar","AddEvent","choice","setChoice","groups","useQuery","options","userGroups","group","label","update","store","response","dataInStore","readQuery","query","writeQuery","userEvents","addEvent","selectedOption","to","Events","displayEvents","events","event","includes","EventCalendar","Event","useParams","AppWhenLoggedIn","client","useApolloClient","useLazyQuery","getEvents","path","Button","clear","resetStore","App","getItem","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0fa0682f.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String!){\n  login(username: $username, password: $password){value}\n}`\n\nexport const ADD_EVENT = gql`\nmutation addEvent($name: String! $group: String! $dates: [String!]!){\n  addEvent(name: $name, group: $group dates: $dates){name}\n}`\n\n\n\n","import React, { useEffect } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation } from \"@apollo/client\"\nimport { LOGIN } from \"../graphql/mutations\"\n\nconst Login = ({ setToken }) => {\n\n  const [ login, result ] = useMutation(LOGIN, {\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  useEffect(() => {\n    if(result.data){\n      const token = result.data.login.value\n      setToken(token)\n      localStorage.setItem(\"user-token\", token)\n    }\n  }, [result.data, setToken])\n\n  return(\n    <div>\n      <h1>Login</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={({ username, password }, { resetForm }) => {\n          login({ variables: { username, password } })\n          resetForm({ values: { username: \"\", password: \"\" } })\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            <button type=\"submit\" id=\"login-button\">\n             Login\n            </button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  )}\n\n\nexport default Login","import { gql } from \"@apollo/client\"\n\nexport const ME = gql`\nquery{\n  me{\n    name\n  }\n}`\n\nexport const ALL_EVENTS = gql`\nquery{\n  allEvents{\n    name\n  }\n}`\n\nexport const USER_GROUPS = gql`\nquery{\n  userGroups{name}\n}`\n\nexport const USER_EVENTS = gql`\nquery{\n  userEvents{\n    name\n    id\n  }\n}`\n\nexport const EVENT = gql`\nquery event($id: ID!){\n  event(id: $id){\n    name\n    id\n    dates\n  }\n}`\n","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst PreviewCalendar = () => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = () => {\n    setClicked(!clicked)\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick()}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default PreviewCalendar","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst ChoiceCalendar = ({ setDates, dates }) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} setDates = {setDates} dates={dates}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, setDates, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} setDates={setDates} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart,setDates, dates }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n    setDates(dates.concat(dateFns.format(day, \"DDD\")))\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default ChoiceCalendar","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { ADD_EVENT } from \"../graphql/mutations\"\nimport { USER_EVENTS, USER_GROUPS } from \"../graphql/queries\"\nimport Select from \"react-select\"\nimport ChoiceCalendar from \"./ChoiceCalendar\"\nimport { Link } from \"react-router-dom\"\nconst AddEvent = () => {\n  const [ dates, setDates] = useState([])\n  const [choice, setChoice] = useState(null)\n  const handleChoice = selectedOption => {\n    setChoice(selectedOption.value)\n  }\n  const groups = useQuery(USER_GROUPS)\n  let options = []\n  if(groups.data){\n    options = groups.data.userGroups.map(group => (\n      { value: group.name, label: group.name }\n    ))\n  }\n  const [addEvent ] = useMutation(ADD_EVENT, {\n    update: (store, response) => {\n      const dataInStore = store.readQuery({ query: USER_EVENTS })\n      store.writeQuery({\n        query: USER_EVENTS,\n        data: {\n          ...dataInStore,\n          userEvents: [...dataInStore.userEvents, response.data.addEvent]\n        }\n      })\n    }\n  })\n  return(\n    <div>\n      <h1>New Event</h1>\n      <Formik\n        initialValues={{ name: \"\" }}\n        onSubmit={({ name }, { resetForm }) => {\n          addEvent({ variables:{ name, group: choice, dates } })\n          resetForm({})\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           event name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            <button id =\"submit-button\"type=\"submit\">\n             Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n      <Select id=\"group-options\"options={options} onChange={handleChoice} />\n      <h2>Choose possible days</h2>\n      <ChoiceCalendar dates={dates} setDates={setDates}/>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )}\n\n\nexport default AddEvent","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nconst Events = ({ events }) => {\n  const displayEvents = events.map(event => (<li key={event.id}><Link to={`/events/${event.id}`}>{event.name}</Link></li>))\n\n  return(\n    <div>\n      <ul>\n        {displayEvents}\n      </ul>\n    </div>\n  )\n}\n\nexport default Events","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst EventCalendar = ({ dates }) => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} dates={dates}/>\n      <ul>{dates}</ul>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates }) => {\n  if(dates.includes(dateFns.format(day, \"DDD\"))){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default EventCalendar","import React from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\"\nimport { EVENT } from \"../graphql/queries\"\nimport EventCalendar from \"./EventCalendar\"\n\nconst Event = () => {\n  const id = useParams().id\n  const event = useQuery(EVENT, { variables: { id } })\n\n  if(!event.data){\n    return(\n      <div>\n        ...loading\n      </div>\n    )\n  }\n\n  return(\n    <div>\n      {event.data.event.name}\n      <EventCalendar dates = {event.data.event.dates}/>\n    </div>\n  )\n}\n\nexport default Event","import React, { useEffect } from \"react\"\nimport Button from \"react-bootstrap/Button\"\nimport { USER_EVENTS } from \"../graphql/queries\"\nimport PreviewCalendar from \"./PreviewCalendar\"\nimport AddEvent from \"./AddEvent\"\nimport Events from \"./Events\"\nimport Event from \"./Event\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport { useApolloClient, useLazyQuery } from \"@apollo/client\"\n\nconst AppWhenLoggedIn = ({ setToken }) => {\n  const client = useApolloClient()\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n  const [getEvents, events] = useLazyQuery(USER_EVENTS)\n\n  useEffect(() => {\n    getEvents()\n  },[])\n\n  return(\n    <Router>\n      <Switch>\n        <Route path=\"/events/:id\">\n          <Event/>\n        </Route>\n        <Route path=\"/addevent\">\n          <AddEvent/>\n        </Route>\n        <Route path=\"/\">\n          <PreviewCalendar/>\n          {events.data ? <Events events={events.data.userEvents}/> : null }\n          <Button id=\"addEvent-button\"><Link to=\"/addevent\">add event</Link></Button>\n          <button id=\"logout-button\"onClick={logout}>Log Out</button>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default AppWhenLoggedIn","\nimport Login from \"./components/Login\"\nimport React, { useState } from \"react\"\nimport AppWhenLoggedIn from \"./components/AppWhenLoggedIn\"\n\n\nconst App = () => {\n\n  const [ token, setToken ] = useState(localStorage.getItem(\"user-token\"))\n  if(!token){\n    return(\n      <Login setToken={setToken}/>\n    )\n  }\n\n  return (\n    <AppWhenLoggedIn setToken={setToken}/>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { setContext } from \"apollo-link-context\"\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"))\n"],"sourceRoot":""}