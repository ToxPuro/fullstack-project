{"version":3,"sources":["graphql/mutations.js","hooks/useLogin.js","components/Login.js","components/SignIn.js","graphql/queries.js","components/ChoiceCalendar.js","components/AddEvent.js","components/EventCalendar.js","components/Event.js","components/PreviewCalendar.js","components/Events.js","components/HomePage.js","App.js","index.js"],"names":["LOGIN","gql","ADD_EVENT","SIGN_IN","useLogin","setToken","client","useApolloClient","history","useHistory","useMutation","onError","error","console","log","loginMutation","login","a","username","password","variables","result","data","value","localStorage","setItem","push","logout","clear","resetStore","Login","initialValues","onSubmit","resetForm","values","handleChange","handleBlur","handleSubmit","id","type","name","onChange","onBlur","to","SignIn","signIn","graphQLErrors","message","USER_GROUPS","USER_EVENTS","EVENT","Header","month","setMonth","className","onClick","dateFns","Days","startDate","shortWeekDaysArray","Array","from","map","e","i","Cells","setDates","dates","monthStart","monthEnd","endDate","rows","days","day","formattedDate","cloneDay","CalendarDate","useState","clicked","setClicked","onDateClick","concat","ChoiceCalendar","Date","AddEvent","choice","setChoice","groups","useQuery","options","userGroups","group","label","update","store","response","dataInStore","readQuery","query","writeQuery","userEvents","addEvent","selectedOption","includes","EventCalendar","Event","useParams","event","PreviewCalendar","Events","displayEvents","events","HomePage","Button","App","getItem","token","useLazyQuery","getEvents","useEffect","path","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a562fa4.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\"\n\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String!){\n  login(username: $username, password: $password){value}\n}`\n\nexport const ADD_EVENT = gql`\nmutation addEvent($name: String! $group: String! $dates: [String!]!){\n  addEvent(name: $name, group: $group dates: $dates){name}\n}`\n\nexport const SIGN_IN = gql`\nmutation createUser($name: String! $username: String! $password: String!){\n  createUser(name: $name, username: $username, password: $password){name}\n}`\n\n\n\n","import { useApolloClient ,useMutation } from \"@apollo/client\"\nimport { LOGIN } from \"../graphql/mutations\"\nimport { useHistory } from \"react-router-dom\"\n\n\nconst useLogin = (setToken) => {\n  const client = useApolloClient()\n  const history = useHistory()\n  const [ loginMutation ] = useMutation(LOGIN, {\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const login = async ({ username, password }) => {\n    console.log(username, password)\n    const result = await loginMutation({ variables: { username, password } })\n    setToken(result.data.login.value)\n    localStorage.setItem(\"user-token\", result.data.login.value)\n    history.push(\"/\")\n  }\n\n  const logout =  () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n\n\n  return{\n    login,\n    logout\n  }\n}\n\nexport default useLogin","import { Formik } from \"formik\"\nimport { Link } from \"react-router-dom\"\nimport useLogin from \"../hooks/useLogin\"\nimport React from \"react\"\n\nconst Login = ({ setToken }) => {\n  const { login } = useLogin(setToken)\n  return(\n    <div>\n      <h1>Login</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={ async ({ username, password }, { resetForm }) => {\n          await login({ username, password })\n          resetForm({ values: { username: \"\", password: \"\" } })\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            <button type=\"submit\" id=\"login-button\">\n             Login\n            </button>\n          </form>\n        )}\n      </Formik>\n      <h2>Not yet signed in?</h2>\n      <button><Link to=\"SignIn\">Sign In</Link></button>\n    </div>\n  )}\n\n\nexport default Login","import React from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation } from \"@apollo/client\"\nimport { SIGN_IN } from \"../graphql/mutations\"\nimport useLogin from \"../hooks/useLogin\"\n\nconst SignIn = ({ setToken }) => {\n  const { login } = useLogin(setToken)\n  const onSubmit = async ({ username, name, password }, { resetForm }) => {\n    await signIn({ variables: { username, name,  password } })\n    await login({ username, password })\n    resetForm({ values: { username: \"\", password: \"\", name: \"\" } })\n  }\n\n\n  const [ signIn ] = useMutation(SIGN_IN, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message)\n    }\n  })\n\n\n\n\n  return(\n    <div>\n      <h1>Sign In</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\", name: \"\" }}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n            name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            <button type=\"submit\" id=\"submit-button\">\n             Sign In\n            </button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  )}\n\n\nexport default SignIn","import { gql } from \"@apollo/client\"\n\nexport const ME = gql`\nquery{\n  me{\n    name\n  }\n}`\n\nexport const ALL_EVENTS = gql`\nquery{\n  allEvents{\n    name\n  }\n}`\n\nexport const USER_GROUPS = gql`\nquery{\n  userGroups{name}\n}`\n\nexport const USER_EVENTS = gql`\nquery{\n  userEvents{\n    name\n    id\n  }\n}`\n\nexport const EVENT = gql`\nquery event($id: ID!){\n  event(id: $id){\n    name\n    id\n    dates\n  }\n}`\n","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst ChoiceCalendar = ({ setDates, dates }) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} setDates = {setDates} dates={dates}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, setDates, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} setDates={setDates} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart,setDates, dates }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n    setDates(dates.concat(dateFns.format(day, \"DDD\")))\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default ChoiceCalendar","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { ADD_EVENT } from \"../graphql/mutations\"\nimport { USER_EVENTS, USER_GROUPS } from \"../graphql/queries\"\nimport Select from \"react-select\"\nimport ChoiceCalendar from \"./ChoiceCalendar\"\nimport { Link } from \"react-router-dom\"\nconst AddEvent = () => {\n  const [ dates, setDates] = useState([])\n  const [choice, setChoice] = useState(null)\n  const handleChoice = selectedOption => {\n    setChoice(selectedOption.value)\n  }\n  const groups = useQuery(USER_GROUPS)\n  let options = []\n  if(groups.data){\n    options = groups.data.userGroups.map(group => (\n      { value: group.name, label: group.name }\n    ))\n  }\n  const [addEvent ] = useMutation(ADD_EVENT, {\n    update: (store, response) => {\n      const dataInStore = store.readQuery({ query: USER_EVENTS })\n      store.writeQuery({\n        query: USER_EVENTS,\n        data: {\n          ...dataInStore,\n          userEvents: [...dataInStore.userEvents, response.data.addEvent]\n        }\n      })\n    }\n  })\n  return(\n    <div>\n      <h1>New Event</h1>\n      <Formik\n        initialValues={{ name: \"\" }}\n        onSubmit={({ name }, { resetForm }) => {\n          addEvent({ variables:{ name, group: choice, dates } })\n          resetForm({})\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           event name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            <button id =\"submit-button\"type=\"submit\">\n             Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n      <Select id=\"group-options\"options={options} onChange={handleChoice} />\n      <h2>Choose possible days</h2>\n      <ChoiceCalendar dates={dates} setDates={setDates}/>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )}\n\n\nexport default AddEvent","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst EventCalendar = ({ dates }) => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} dates={dates}/>\n      <ul>{dates}</ul>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates }) => {\n  if(dates.includes(dateFns.format(day, \"DDD\"))){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default EventCalendar","import React from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\"\nimport { EVENT } from \"../graphql/queries\"\nimport EventCalendar from \"./EventCalendar\"\n\nconst Event = () => {\n  const id = useParams().id\n  const event = useQuery(EVENT, { variables: { id } })\n\n  if(!event.data){\n    return(\n      <div>\n        ...loading\n      </div>\n    )\n  }\n\n  return(\n    <div>\n      {event.data.event.name}\n      <EventCalendar dates = {event.data.event.dates}/>\n    </div>\n  )\n}\n\nexport default Event","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst PreviewCalendar = () => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = () => {\n    setClicked(!clicked)\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick()}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default PreviewCalendar","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nconst Events = ({ events }) => {\n  const displayEvents = events.map(event => (<li key={event.id}><Link to={`/events/${event.id}`}>{event.name}</Link></li>))\n\n  return(\n    <div>\n      <ul>\n        {displayEvents}\n      </ul>\n    </div>\n  )\n}\n\nexport default Events","import React from \"react\"\nimport PreviewCalendar from \"./PreviewCalendar\"\nimport Events from \"./Events\"\nimport Button from \"react-bootstrap/Button\"\nimport { Link } from \"react-router-dom\"\n\n\nconst HomePage = ({ events, logout }) => {\n  return(\n    <div>\n      <PreviewCalendar/>\n      {events.data ? <Events events={events.data.userEvents}/> : null }\n      <Button id=\"addEvent-button\"><Link to=\"/addevent\">add event</Link></Button>\n      <button id=\"logout-button\"onClick={logout}>Log Out</button>\n    </div>\n  )\n}\n\nexport default HomePage","\nimport Login from \"./components/Login\"\nimport React, { useEffect, useState } from \"react\"\nimport SignIn from \"./components/SignIn\"\n\nimport { USER_EVENTS } from \"./graphql/queries\"\nimport AddEvent from \"./components/AddEvent\"\n\nimport Event from \"./components/Event\"\nimport HomePage from \"./components/HomePage\"\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\nimport { useLazyQuery } from \"@apollo/client\"\n\nimport useLogin from \"./hooks/useLogin\"\n\n\nconst App = () => {\n  const [token, setToken] = useState(localStorage.getItem(\"user-token\"))\n  const { logout } = useLogin(setToken)\n  const [getEvents, events] = useLazyQuery(USER_EVENTS)\n\n  useEffect(() => {\n    getEvents()\n  },[])\n\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/SignIn\">\n          <SignIn setToken= {setToken}/>\n        </Route>\n        <Route path=\"/login\">\n          <Login setToken = {setToken} />\n        </Route>\n        <Route path=\"/events/:id\">\n          <Event/>\n        </Route>\n        <Route path=\"/addevent\">\n          <AddEvent/>\n        </Route>\n        <Route path=\"/\">\n          {token ? <HomePage events={events} logout={logout}/> : <Redirect to=\"/login\"/>}\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { setContext } from \"apollo-link-context\"\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"))\n"],"sourceRoot":""}