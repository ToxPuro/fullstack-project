{"version":3,"sources":["components/Login.js","components/SignIn.js","graphql/mutations.js","graphql/queries.js","components/ChoiceCalendar.js","components/Loader.js","components/AddEvent.js","components/AddGroup.js","components/CalendarHeader.js","components/CalendarDays.js","components/EventCalendar.js","components/PickingEvent.js","components/DoneEvent.js","components/VotingCalendar.js","components/VotingEvent.js","components/Event.js","components/PreviewCalendar.js","components/Events.js","components/HomePage.js","components/Groups.js","components/Users.js","components/Group.js","components/User.js","components/JoinGroup.js","components/Notification.js","components/Messages.js","components/Message.js","components/GroupAddUsers.js","components/GroupMessages.js","components/SendMessage.js","hooks/useLogin.js","App.js","index.js"],"names":["validationSchema","yup","shape","username","required","min","password","Login","login","initialValues","onSubmit","a","resetForm","values","handleChange","handleBlur","handleSubmit","isValid","dirty","id","type","name","onChange","onBlur","value","to","SignIn","signIn","signInSuccessful","console","log","LOGIN","gql","ADD_EVENT","SIGN_IN","ADD_GROUP","VOTE_EVENT","LEAVE_GROUP","REMOVE_FROM_GROUP","ADD_TO_ADMINS","ADD_TO_GROUP","READ_MESSAGE","SEND_USER_MESSAGE","JOIN_REQUEST","DELETE_MESSAGE","USER_EVENTS","USER_MESSAGES","USER_ID","USER_GROUPS","EVENT","GET_GROUP","GET_MESSAGE","GROUPS_THAT_USER_IS_NOT_IN","GET_USER","USERS_NOT_IN_GROUP","Header","month","setMonth","className","onClick","dateFns","Days","startDate","shortWeekDaysArray","Array","from","map","e","i","Cells","setDates","dates","monthStart","monthEnd","endDate","rows","days","day","formattedDate","cloneDay","push","CalendarDate","useState","clicked","setClicked","parseInt","Date","concat","onDateClick","ChoiceCalendar","Loader","AddEvent","setNotification","choice","setChoice","groups","useQuery","options","data","me","group","label","useMutation","update","store","response","dataInStore","readQuery","query","eventsInStore","events","writeQuery","addEvent","length","message","error","setTimeout","variables","selectedOption","AddGroup","createGroup","addGroup","users","setUsers","user","setFieldValue","join","CalendarHeader","CalendarDays","setVotes","votes","ChoiceDate","vote","setVote","cloneVotes","dayIndex","findIndex","date","useEffect","includes","EventCalendar","parseDate","PickingEvent","event","initialVotes","filter","voter","find","forEach","onError","DoneEvent","finalDate","displayDate","currentVote","setCurrentVote","style","VoteDate","result","VotingEvent","bestDates","votesToString","toString","VotingCalendar","Event","useParams","status","history","useHistory","test","secondTest","PreviewCalendar","Events","displayEvents","HomePage","logout","Button","unReadMessagesCount","Groups","displayGroups","Users","admins","userID","modify","fields","listInCache","__ref","removeFromGroup","remove","addToAdminMutation","removeUser","addToAdmin","adminsIDs","admin","filteredUsers","normalUsersView","adminUsersView","displayUsers","displayAdmins","Group","groupsUserNotIn","leaveGroup","leave","groupName","JoinGroupElement","request","JoinGroup","Notification","notification","MessageListElement","setAsRead","deleteMessageMutation","display","marginRight","title","read","Messages","messages","messagesData","sort","b","reverse","displayMessages","MessageType","JoiningRequest","add","AcceptRequest","sender","UserMessage","content","Message","messageData","receivers","GroupAddUsers","usersNotInGroup","addToGroup","addUser","GroupMessages","SendMessage","sendMessage","receiversList","split","receiver","replace","useLogin","setToken","client","useApolloClient","startsWith","getErrorMessage","graphQLErrors","signInMutation","loginMutation","localStorage","setItem","clear","resetStore","AppRouter","getItem","token","path","User","App","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58fd5fb5.chunk.js","sourcesContent":["import { Formik } from \"formik\"\nimport { Link } from \"react-router-dom\"\nimport React from \"react\"\nimport * as yup from \"yup\"\n\nconst validationSchema = yup.object().shape({\n  username: yup\n    .string()\n    .required(\"Username is required\")\n    .min(3, \"Username needs to be atleast 3 characters\"),\n  password: yup\n    .string()\n    .required(\"Password is required\")\n    .min(8, \"Password needs to be atleast 8 characters\")\n\n})\n\nconst Login = ({ login }) => {\n  return(\n    <div>\n      <h1>Login</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={ async ({ username, password }, { resetForm }) => {\n          await login({ username, password })\n          resetForm({ values: { username: \"\", password: \"\" } })\n        }}\n        validationSchema={validationSchema}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isValid,\n          dirty\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            {(isValid && dirty) ?  <button type=\"submit\" id=\"login-button\">\n              Login\n            </button> : null }\n          </form>\n        )}\n      </Formik>\n      <h2>Not yet signed in?</h2>\n      <button id=\"signIn-button\"><Link to=\"SignIn\">Sign In</Link></button>\n    </div>\n  )}\n\n\nexport default Login","import React from \"react\"\nimport { Formik } from \"formik\"\nimport * as yup from \"yup\"\n\nconst validationSchema = yup.object().shape({\n  username: yup\n    .string()\n    .required(\"Username is required\")\n    .min(3),\n  name: yup\n    .string()\n    .required(\"Name is required\")\n    .min(3),\n  password: yup\n    .string()\n    .required(\"Password is required\")\n    .min(8)\n\n})\n\nconst SignIn = ({ login, signIn }) => {\n  const onSubmit = async ({ username, name, password }, { resetForm }) => {\n    const signInSuccessful = await signIn(username, name, password)\n    console.log(signInSuccessful)\n    if(signInSuccessful){\n      await login({ username, password })\n    }\n\n    resetForm({ values: { username: \"\", password: \"\", name: \"\" } })\n  }\n\n\n\n\n\n\n\n  return(\n    <div>\n      <h1>Sign In</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\", name: \"\" }}\n        onSubmit={onSubmit}\n        validationSchema = {validationSchema}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isValid,\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n            name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"text\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            { (isValid) ?             <button type=\"submit\" id=\"submit-button\">\n             Sign In\n            </button> : null}\n          </form>\n        )}\n      </Formik>\n    </div>\n  )}\n\n\nexport default SignIn","import { gql } from \"@apollo/client\"\n\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String!){\n  login(username: $username, password: $password){value}\n}`\n\nexport const ADD_EVENT = gql`\nmutation addEvent($name: String! $group: String! $dates: [String!]!){\n  addEvent(name: $name, group: $group dates: $dates){name id}\n}`\n\nexport const SIGN_IN = gql`\nmutation createUser($name: String! $username: String! $password: String!){\n  createUser(name: $name, username: $username, password: $password){name}\n}`\n\nexport const ADD_GROUP = gql`\nmutation addGroup($name: String! $users: [String]!){\n  createGroup(name: $name, users: $users){name id}\n}`\n\nexport const JOIN_GROUP = gql`\nmutation joinGroup($id: ID!){\n  joinGroup(id: $id){\n    name \n    id\n  }\n}`\n\nexport const VOTE_EVENT = gql`\nmutation voteEvent($id: ID!, $votes: [VoteInput]!){\n  voteEvent(id: $id, votes: $votes){\n    name \n    id\n    status \n    dates{\n      votes{\n        voter \n        vote}\n      }\n    }\n}`\n\nexport const LEAVE_GROUP = gql`\nmutation leaveGroup($id: ID!){\n  leaveGroup(id: $id){\n    name\n    id\n  }\n}`\n\nexport const REMOVE_FROM_GROUP = gql`\nmutation removeFromGroup($group: String!, $user: String!){\n  removeFromGroup(group: $group, user: $user){\n    id\n  }\n}`\n\nexport const ADD_TO_ADMINS = gql`\nmutation addToAdmins($group: String!, $user: String!){\n  addToAdmins(group: $group, user: $user){\n    name\n    username\n    id\n  }\n}`\n\nexport const ADD_TO_GROUP = gql`\nmutation addToGroup($group: String!, $user: String!){\n  addToGroup(group: $group, user: $user){\n    name\n    username\n    id\n  }\n}`\n\nexport const READ_MESSAGE = gql`\nmutation readMessage($id: ID!){\n  readMessage(id: $id){read}\n}`\n\nexport const SEND_USER_MESSAGE = gql`\nmutation sendUserMessage($receivers: [String!]!, $message: String!, $title: String!){\n  sendUserMessage(receivers: $receivers, message: $message, title: $title){\n    title\n    receivers\n    content\n  }\n}`\nexport const JOIN_REQUEST = gql`\nmutation joinRequest($group: String!){\n  joinRequest(group: $group){name}\n}`\n\nexport const DELETE_MESSAGE = gql`\nmutation deleteMessage($id: ID!){\n  deleteMessage(id: $id)\n}`\n\n","import { gql } from \"@apollo/client\"\n\nexport const USER_EVENTS = gql`\nquery{\n  me{\n    name\n    username\n    id\n    events{\n      name\n      id\n      status\n      finalDate\n    }\n    unReadMessagesCount\n  }\n}`\n\nexport const USER_MESSAGES = gql`\nquery{\n  me{\n    messages{\n      id\n      title\n      read\n      sender\n    }\n  }\n}`\n\nexport const USER_ID = gql`\nquery{\n  me{\n    id\n  }\n}`\n\nexport const ALL_EVENTS = gql`\nquery{\n  allEvents{\n    name\n  }\n}`\n\nexport const USER_GROUPS = gql`\nquery{\n  me{\n    id\n    groups{\n      name\n      id\n    }\n  }\n}`\n\nexport const EVENT = gql`\nquery event($id: ID!){\n  event(id: $id){\n    name\n    id\n    status\n    finalDate\n    dates{\n      date\n      votes{\n        voter\n        vote\n      }\n    }\n    bestDates{\n      date\n      votes{\n        voter\n        vote\n      }\n    }\n  }\n}`\n\nexport const GET_GROUP = gql`\nquery group($name: String!){\n  group(name: $name){\n    name\n    id\n    users{\n      name\n      username\n      id\n    }\n    admins{\n      name\n      username\n      id\n    }\n  }\n}`\n\nexport const GET_MESSAGE = gql`\nquery message($id: ID!){\n  message(id: $id){\n    title\n    sender\n    receivers\n    type\n    ... on JoiningRequest {\n      group\n    }\n    ... on UserMessage {\n      content\n    }\n  }\n}`\n\nexport const GROUPS_THAT_USER_IS_NOT_IN = gql`\nquery{\n  me{\n    id\n    groupsUserNotIn{\n      name\n      id\n    }\n  }\n}`\n\nexport const GET_USER = gql`\nquery user($username: String!){\n  user(username: $username){\n    name\n    id\n  }\n}`\n\nexport const ALL_GROUPS = gql`\nquery{\n  allGroups{\n    name\n    id\n  }\n}`\n\nexport const USERS_NOT_IN_GROUP = gql`\nquery UsersNotInGroup($name: String!){\n  group(name: $name){\n    id\n    name\n    usersNotInGroup{\n      name\n      id\n      username\n    }\n  }\n}`\n\n\n","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst ChoiceCalendar = ({ setDates, dates }) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} setDates = {setDates} dates={dates}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, setDates, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} setDates={setDates} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart,setDates, dates }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n    setDates(dates.concat(day))\n  }\n\n  let className = \"col cell default\"\n  if(!dateFns.isSameMonth(day, monthStart) || parseInt(dateFns.format(day, \"DDD\"))<  parseInt(dateFns.format(new Date, \"DDD\"))){\n    className =\"col cell disabled\"\n  }\n  if(clicked){\n    className = \"col cell green\"\n  }\n  return(\n    <div\n      id={`dates-${formattedDate}`}\n      className={className}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default ChoiceCalendar","import React from \"react\"\n\nconst Loader = () => {\n  return(\n    <div>\n      ...loading\n    </div>\n  )\n}\n\nexport default Loader","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { ADD_EVENT } from \"../graphql/mutations\"\nimport { USER_EVENTS, USER_GROUPS } from \"../graphql/queries\"\nimport Select from \"react-select\"\nimport ChoiceCalendar from \"./ChoiceCalendar\"\nimport { Link } from \"react-router-dom\"\nimport Loader from \"./Loader\"\nconst AddEvent = ({ setNotification }) => {\n  const [ dates, setDates] = useState([])\n  const [choice, setChoice] = useState(null)\n  const handleChoice = selectedOption => {\n    setChoice(selectedOption.value)\n  }\n  const groups = useQuery(USER_GROUPS)\n  let options = []\n  if(groups.data){\n    options = groups.data.me.groups.map(group => (\n      { value: group.name, label: group.name }\n    ))\n  }\n  const [addEvent ] = useMutation(ADD_EVENT, {\n    update: (store, response) => {\n      console.log(\"dataInStore:\")\n      const dataInStore = store.readQuery({ query: USER_EVENTS })\n      if(dataInStore){\n        const eventsInStore = dataInStore.me.events\n        console.log(dataInStore.me)\n        console.log(eventsInStore)\n        console.log(response)\n        store.writeQuery({\n          query: USER_EVENTS,\n          data: {\n            me: {\n              ...dataInStore.me,\n              events: eventsInStore.concat(response.data.addEvent)\n            }\n          }\n        })\n\n      }\n\n    }\n  })\n  if(!groups.data){\n    return(\n      <Loader/>\n    )\n  }\n  if(options.length === 0 && groups.data){\n    return(\n      <div>\n        <h2>{\"You need to be part of group to add events\"}</h2>\n        <h2><Link to=\"/joinGroup\">Join Here</Link></h2>\n      </div>\n    )\n  }\n  return(\n    <div>\n      <h1>New Event</h1>\n      <Formik\n        initialValues={{ name: \"\" }}\n        onSubmit={({ name }, { resetForm }) => {\n          if(dates.length === 0){\n            setNotification({ message: \"pick possible dates\", error: true })\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n          }\n          else if(!choice){\n            setNotification({ message: \"pick group to add event\", error: true })\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n          }\n          else{\n            addEvent({ variables:{ name, group: choice, dates } })\n            setNotification({ message: `added event ${name} to group ${choice}`, error: false })\n            setTimeout(() => {\n              setNotification(null)\n            }, 5000)\n            resetForm({})\n          }\n\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           event name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            <button id =\"submit-button\"type=\"submit\">\n             Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n      <Select id=\"group-options\"options={options} onChange={handleChoice} />\n      <h2>Choose possible days</h2>\n      <ChoiceCalendar dates={dates} setDates={setDates}/>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )}\n\n\nexport default AddEvent","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport { Link } from \"react-router-dom\"\nimport { useMutation } from \"@apollo/client\"\nimport { ADD_GROUP } from \"../graphql/mutations\"\nimport { USER_GROUPS } from \"../graphql/queries\"\nconst AddGroup = ({ setNotification }) => {\n  const[addGroup]  = useMutation(ADD_GROUP, {\n    update: (store, response) => {\n      const dataInStore = store.readQuery({ query: USER_GROUPS })\n      if(dataInStore){\n        store.writeQuery({\n          query: USER_GROUPS,\n          data: {\n            me: {\n              ...dataInStore.me,\n              groups: dataInStore.me.groups.concat(response.data.createGroup)\n            }\n          }\n        })\n      }\n    }\n  })\n\n  const [ users, setUsers] = useState([])\n  return(\n    <div>\n      <h1>New Group</h1>\n      <Formik\n        initialValues={{ name: \"\", user: \"\" }}\n        onSubmit={async ({ name }, { resetForm }) => {\n          await addGroup({ variables: { name, users } })\n          setNotification({ message: `added group ${name}`, error: false })\n          setTimeout(() => {\n            setNotification(null)\n          }, 5000)\n          resetForm({})\n          resetForm({})\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          setFieldValue\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           group name: <input\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            <br/>\n          users: <input\n              id=\"user\"\n              type=\"text\"\n              name=\"user\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.user}/>\n            <button type=\"button\" id=\"add-user-button\" onClick={() => {\n              setUsers(users.concat(values.user))\n              setFieldValue(\"user\", \"\")\n            }}>add user</button>\n            <br/>\n            {users.join(\" \")}\n            <br/>\n            <button id =\"submit-button\"type=\"submit\">\n             Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )}\n\n\nexport default AddGroup","import \"../App.css\"\nimport React from \"react\"\nimport * as dateFns from \"date-fns\"\n\nconst CalendarHeader = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n}\n\nexport default CalendarHeader","import React from \"react\"\nimport \"../App.css\"\nimport * as dateFns from \"date-fns\"\nconst CalendarDays = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nexport default CalendarDays","import React, { useEffect, useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\nimport CalendarHeader from \"./CalendarHeader\"\nimport CalendarDays from \"./CalendarDays\"\nconst EventCalendar = ({ dates, setVotes, votes }) => {\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <CalendarHeader month={month} setMonth={setMonth}/>\n      <CalendarDays month={month}/>\n      <Cells month={month} dates={dates} setVotes={setVotes} votes={votes}/>\n    </div>\n  )\n}\n\nconst Cells = ({ month, dates, setVotes, votes }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates} setVotes={setVotes} votes={votes}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst ChoiceDate = ({ day, formattedDate, votes, setVotes }) => {\n  const [vote, setVote] = useState(\"\")\n  const cloneVotes = [...votes]\n  console.log(cloneVotes)\n  const dayIndex = cloneVotes.findIndex(vote => dateFns.format(vote.date, \"DDD\") === dateFns.format(day, \"DDD\"))\n  useEffect(() => {\n    if(cloneVotes[dayIndex]){\n      setVote(cloneVotes[dayIndex].vote)\n    }\n  }, [dayIndex])\n  const onClick = (vote) => {\n    console.log(day)\n    if(!(parseInt(dateFns.format(day, \"DDD\"))<  parseInt(dateFns.format(new Date, \"DDD\")))){\n      if(vote===\"blue\"){\n        setVote(\"green\")\n        cloneVotes[dayIndex].vote = \"green\"\n        setVotes(cloneVotes)\n\n      }\n      else if(vote === \"green\"){\n        setVote(\"red\")\n        cloneVotes[dayIndex].vote = \"red\"\n        setVotes(cloneVotes)\n      }\n      else{\n        setVote(\"blue\")\n        cloneVotes[dayIndex].vote = \"blue\"\n        setVotes(cloneVotes)\n      }\n    }\n\n  }\n  console.log(vote)\n  return(\n    <div onClick={() => onClick(vote)}\n      id={`dates-${formattedDate}`}\n      className={`col cell ${vote}`}\n      key={day}>\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates, setVotes, votes }) => {\n  const checkDates = dates.map(date => dateFns.format(date, \"d\"))\n  if(checkDates.includes(dateFns.format(day, \"d\"))){\n    console.log(\"FOUND\")\n    return(\n      <ChoiceDate setVotes={setVotes} votes={votes} day={day} formattedDate = {formattedDate}/>\n\n    )\n  }\n\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default EventCalendar","import React, { useState, useEffect } from \"react\"\nimport {  useMutation } from \"@apollo/client\"\nimport { VOTE_EVENT } from \"../graphql/mutations\"\nimport EventCalendar from \"./EventCalendar\"\nimport { Link } from \"react-router-dom\"\nimport * as dateFns from \"date-fns\"\n\nconst parseDate = (date) => {\n  console.log(date)\n  let result = new Date(date)\n  return result\n\n}\n\nconst PickingEvent = ({ event, user, setNotification }) => {\n  const [ votes, setVotes ] = useState([])\n  useEffect(() => {\n    if(event && user ){\n      let initialVotes = event.dates.map(date => ({ date: parseDate(date.date), vote: \"blue\" }))\n      if(event.dates[0].votes.filter(vote => vote.voter === user.username).length !== 0){\n        initialVotes = event.dates.map(date => ({ date: parseDate(date.date), vote: date.votes.find(vote => vote.voter === user.username ).vote }))\n      }\n      initialVotes.forEach(date => {\n        if(parseInt(dateFns.format(date.date,\"DDD\")) < parseInt(dateFns.format(new Date(), \"DDD\"))){\n          date.vote = \"red\"\n        }\n      })\n      setVotes(initialVotes)\n    }\n  },[event, user])\n  const [ vote ] = useMutation(VOTE_EVENT, {\n    onError : (error) => {\n      console.log(error)\n    }\n  })\n  const onClick = async () => {\n    await vote({ variables: { id: event.id, votes } })\n    setNotification({ message: \"Voted successfully\", error: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n  return(\n    <div>\n      <h2>{event.name}</h2>\n      <EventCalendar dates = {event.dates.map(date => parseDate(date.date))} setVotes={setVotes} votes={votes}/>\n      <button id=\"voting-button\" onClick={onClick}>Vote</button>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )\n}\n\nexport default PickingEvent","import React from \"react\"\nimport * as dateFns from \"date-fns\"\nimport { Link } from \"react-router-dom\"\nconst DoneEvent = ({ event }) => {\n  const month = dateFns.format(new Date(event.finalDate), \"MMM\")\n  const displayDate = dateFns.format(new Date(event.finalDate), \"do\")\n  return(\n    <div>\n      <h2>{event.name}</h2>\n      <span>\n        {month}\n        {displayDate}\n      </span>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )\n}\n\nexport default DoneEvent","import React, {  useState, useEffect } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\nimport CalendarHeader from \"./CalendarHeader\"\nimport CalendarDays from \"./CalendarDays\"\nconst EventCalendar = ({ dates, votes, setVotes, currentVote, setCurrentVote }) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <CalendarHeader month={month} setMonth={setMonth}/>\n      <CalendarDays month={month}/>\n      <Cells month={month} dates={dates} votes={votes} setVotes={setVotes} currentVote={currentVote} setCurrentVote={setCurrentVote}/>\n    </div>\n  )\n}\n\nconst Cells = ({ month, dates, setVotes, votes, currentVote, setCurrentVote }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates} setVotes={setVotes} votes={votes} currentVote={currentVote} setCurrentVote={setCurrentVote}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates, votes, setVotes, currentVote, setCurrentVote }) => {\n  const checkDates = dates.map(date => dateFns.format(date, \"d\"))\n  let style = \"\"\n  if(checkDates.includes(dateFns.format(day, \"d\"))){\n    return <VoteDate setVotes={setVotes} votes={votes} day={day} formattedDate = {formattedDate} currentVote={currentVote} setCurrentVote={setCurrentVote}/>\n  }\n  if(!dateFns.isSameMonth(day, monthStart)){\n    style=\"disabled\"\n  }\n  return(\n    <div\n      className={`col cell ${style}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nconst VoteDate = ({ day, formattedDate, votes, setVotes, currentVote, setCurrentVote }) => {\n  const [vote, setVote] = useState(null)\n  const cloneVotes = [...votes]\n  const dayIndex = cloneVotes.findIndex(vote => dateFns.format(vote.date, \"DDD\") === dateFns.format(day, \"DDD\"))\n  useEffect(() => {\n    if(cloneVotes[dayIndex]){\n      setVote(cloneVotes[dayIndex].vote)\n    }\n  }, [dayIndex])\n  const onClick = () => {\n    console.log(currentVote)\n    let result = currentVote\n    if(result>votes.length){\n      result = \"\"\n    }\n    setVote(result)\n    cloneVotes[dayIndex].vote = result\n    setVotes(cloneVotes)\n    if(result===\"\"){\n      setCurrentVote(1)\n    } else{\n      setCurrentVote(result+1)\n    }\n\n  }\n  return(\n    <div onClick={() => onClick()}\n      id={`dates-${formattedDate}`}\n      className=\"col cell\"\n      key={day}>\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n      {vote}\n    </div>\n  )\n}\n\n\nexport default EventCalendar","import { useMutation } from \"@apollo/client\"\nimport React, { useEffect, useState } from \"react\"\nimport { VOTE_EVENT } from \"../graphql/mutations\"\nimport VotingCalendar from \"./VotingCalendar\"\n\nconst parseDate = (date) => {\n  console.log(date)\n  let result = new Date(date)\n  return result\n\n}\n\n\nconst VotingEvent = ({ event, user }) => {\n  const [vote] = useMutation(VOTE_EVENT, {\n    onError: error => {\n      console.log(error)\n    }\n  })\n  const [ votes, setVotes ] = useState([])\n  const [ currentVote, setCurrentVote ] = useState(1)\n  console.log(votes)\n  useEffect(() => {\n    if(event && user){\n      let initialVotes = event.bestDates.map(date => ({ date: parseDate(date.date), vote: \"\" }))\n      console.log(event.bestDates[0])\n      if(event.bestDates[0].votes.filter(vote => vote.voter === user.username).length !== 0){\n        initialVotes = event.bestDates.map(date => ({ date: parseDate(date.date), vote: date.votes.find(vote => vote.voter === user.username ).vote }))\n      }\n      setVotes(initialVotes)\n    }\n  }, [event, user])\n\n  const onClick = async () => {\n    console.log(event.id)\n    const votesToString = votes.map(vote => ({ date: vote.date, vote: vote.vote.toString() }))\n    console.log(votesToString)\n    await vote({ variables: { id: event.id, votes: votesToString } })\n  }\n\n  return(\n    <div>\n      <h2>{event.name}</h2>\n      voting\n      <VotingCalendar dates = {event.bestDates.map(date => parseDate(date.date))} votes={votes} setVotes={setVotes} currentVote={currentVote} setCurrentVote={setCurrentVote}/>\n      <button id=\"voting-button\" onClick={onClick}>Vote</button>\n    </div>\n  )\n}\n\nexport default VotingEvent","import React from \"react\"\nimport {  useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\"\nimport { USER_EVENTS, EVENT } from \"../graphql/queries\"\nimport PickingEvent from \"./PickingEvent\"\nimport DoneEvent from \"./DoneEvent\"\nimport VotingEvent from \"./VotingEvent\"\n\n\nconst Event = ({ setNotification }) => {\n  const id = useParams().id\n  const user= useQuery(USER_EVENTS)\n  console.log(user)\n  const event = useQuery(EVENT, { variables: { id } })\n  console.log(event)\n\n\n  if(!event.data || !user.data){\n    return(\n      <div>\n        ...loading\n      </div>\n    )\n  }\n  if(event.data.event.status===\"done\"){\n    return(\n      <div>\n        <DoneEvent event = {event.data.event}/>\n      </div>\n    )\n  }\n  if(event.data.event.status===\"voting\"){\n    return(\n      <div>\n        <VotingEvent event = {event.data.event} user={user.data.me} setNotification={setNotification}/>\n      </div>\n    )\n  }\n  return(\n    <div>\n      <PickingEvent user={user.data.me} event={event.data.event} setNotification={setNotification}/>\n    </div>\n  )\n}\n\nexport default Event","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\nimport { useHistory } from \"react-router-dom\"\nimport CalendarHeader from \"./CalendarHeader\"\nimport CalendarDays from \"./CalendarDays\"\n\nconst PreviewCalendar = ({ events }) => {\n  console.log(events)\n  const dates = events.filter(event => event.status === \"done\").map(event => ({ date: event.finalDate, name: event.name, id: event.id }))\n  console.log(dates)\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <CalendarHeader month={month} setMonth={setMonth}/>\n      <CalendarDays month={month}/>\n      <Cells month={month} dates={dates}/>\n    </div>\n  )\n}\n\n\n\n\nconst Cells = ({ month, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate key={cloneDay} formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates }) => {\n  const history = useHistory()\n  const test = dateFns.format(day, \"DDD\")\n  console.log(test)\n  if(dates[0]){\n    const secondTest = dateFns.format( new Date(dates[0].date), \"DDD\")\n    console.log(secondTest)\n  }\n  const onClick = () => {\n    if(event){\n      history.push(`events/${event.id}`)\n    }\n  }\n  const event = dates.find(date => dateFns.format( new Date(date.date), \"DDD\") === dateFns.format(day, \"DDD\"))\n  return(\n    <div\n      onClick = {onClick}\n      id={`dates-${formattedDate}`}\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n      <div>\n        {event ? event.name : null}\n      </div>\n    </div>\n  )\n}\n\nexport default PreviewCalendar","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nconst Events = ({ events }) => {\n  const displayEvents = events.map(event => (<li key={event.id}><Link to={`/events/${event.id}`}>{event.name}</Link></li>))\n\n  return(\n    <div>\n      <ul>\n        {displayEvents}\n      </ul>\n    </div>\n  )\n}\n\nexport default Events","import React, { useEffect } from \"react\"\nimport PreviewCalendar from \"./PreviewCalendar\"\nimport Events from \"./Events\"\nimport Button from \"react-bootstrap/Button\"\nimport { Link } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { USER_EVENTS } from \"../graphql/queries\"\nimport Loader from \"./Loader\"\n\n\nconst HomePage = ({ logout }) => {\n  const user= useQuery(USER_EVENTS)\n  if(user.data){\n    console.log(user.data.me.events)\n  }\n  console.log(user)\n  useEffect(() => {\n    if(user.error){\n      if(user.error.message===\"user needs to be logged in\"){\n        logout()\n      }\n    }\n\n  },[user])\n  if(!user.data){\n    return(\n      <Loader/>\n    )\n  }\n\n  return(\n    <div>\n      <h2>Hello {user.data.me.name} </h2>\n      <PreviewCalendar events={user.data.me.events} />\n      <Events events={user.data.me.events}/>\n      <Button id=\"addEvent-button\"><Link to=\"/addevent\">add event</Link></Button>\n      <button id=\"logout-button\"onClick={logout}>Log Out</button>\n      <button id=\"addGroup-button\"><Link to=\"/addGroup\">add group</Link></button>\n      <button id=\"groups-button\"><Link to=\"/groups\">groups</Link></button>\n      <button id=\"join-group-button\"><Link to=\"/joinGroup\">join group</Link></button>\n      <button id=\"messages-button\"><Link to=\"/messages\">messages: {user.data.me.unReadMessagesCount}</Link></button>\n    </div>\n  )\n}\n\nexport default HomePage","import React from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { USER_GROUPS } from \"../graphql/queries\"\nimport { Link } from \"react-router-dom\"\nimport Loader from \"./Loader\"\nconst Groups = () => {\n  const groups = useQuery(USER_GROUPS)\n  const displayGroups = groups.data ? groups.data.me.groups.map(group => (<li key={group.id}><Link  id={group.name} to ={`/groups/${group.name}`}>{group.name}</Link></li>)) : []\n  if(!groups.data){\n    return(\n      <Loader/>\n    )\n  }\n  if(displayGroups.length === 0 && groups.data){\n    return(\n      <div>\n        <h2>{\"It seems you aren't part any group yet\"}</h2>\n        <h2><Link to=\"/joinGroup\">Join Here</Link></h2>\n      </div>\n    )\n  }\n  return(\n    <div>\n      <ul>\n        {displayGroups}\n      </ul>\n    </div>\n  )\n}\n\nexport default Groups","import React from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { USER_ID } from \"../graphql/queries\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport Loader from \"./Loader\"\nimport { REMOVE_FROM_GROUP, ADD_TO_ADMINS } from \"../graphql/mutations\"\nconst Users = ({ users, admins, group, setNotification }) => {\n  const history = useHistory()\n  const userID = useQuery(USER_ID)\n  const [remove] = useMutation(REMOVE_FROM_GROUP, {\n    update: (store, response) => {\n      store.modify({\n        id: `Group:${group.id}`,\n        fields: {\n          users(listInCache){\n            return listInCache.filter(user => user.__ref !== `User:${response.data.removeFromGroup.id}`)\n          }\n        }\n      })\n    }\n  })\n  const [ addToAdminMutation] = useMutation(ADD_TO_ADMINS, {\n    update: (store, response) => {\n      store.modify({\n        id: `Group:${group.id}`,\n        fields: {\n          admins(listInCache){\n            return listInCache.concat(response)\n          }\n        }\n      })\n    }\n  })\n  if(!userID.data && group.name){\n    return(\n      <Loader/>\n    )\n  }\n  const removeUser = async (username) => {\n    await remove({ variables: { user: username, group: group.name } })\n    setNotification({ message: `removed user ${username} from group`, error: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n  const addToAdmin = async (username) => {\n    await addToAdminMutation({ variables: { user: username, group: group.name } })\n    setNotification({ message: `added user ${username} to admins`, error: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const adminsIDs = admins.map(admin => admin.id)\n  const filteredUsers = users.filter(user => !adminsIDs.includes(user.id))\n  const normalUsersView = filteredUsers.map(user => (<li key={user.id}><Link to={`/users/${user.username}`}>{user.name}</Link></li>))\n  const adminUsersView = filteredUsers.map(user => (<li key={user.id}><Link to={`/users/${user.username}`}>{user.name}</Link> <button onClick = {() => addToAdmin(user.username)}>add to admin</button><button onClick={() => removeUser(user.username)}> remove </button></li>))\n  const displayUsers = adminsIDs.includes(userID.data.me.id) ? adminUsersView : normalUsersView\n\n  const displayAdmins = admins.map(user => (<li key={user.id}><Link to={`/users/${user.username}`}>{user.name}</Link></li>))\n\n  return(\n    <div>\n      <h2>Admins</h2>\n      <ul>\n        {displayAdmins}\n      </ul>\n      <h2>Users</h2>\n      <ul>\n        {displayUsers}\n      </ul>\n      {adminsIDs.includes(userID.data.me.id) ? <button onClick={() => history.push(`/groups/${group.name}/addusers`)}> add users to group</button> : null}\n    </div>\n  )\n}\n\nexport default Users","import React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { GET_GROUP, GROUPS_THAT_USER_IS_NOT_IN, USER_ID } from \"../graphql/queries\"\nimport Users from \"./Users\"\nimport Loader from \"./Loader\"\nimport { LEAVE_GROUP } from \"../graphql/mutations\"\nimport { Link, useHistory } from \"react-router-dom\"\n\nconst Group = ({ setNotification }) => {\n  const history = useHistory()\n  const user = useQuery(USER_ID)\n  console.log(user.data)\n  const [leaveGroup] = useMutation(LEAVE_GROUP, {\n    update: (store, response) => {\n      console.log(response)\n      const dataInStore = store.readQuery({ query: GROUPS_THAT_USER_IS_NOT_IN })\n      if(dataInStore){\n        store.writeQuery({\n          query: GROUPS_THAT_USER_IS_NOT_IN,\n          data: {\n            me: {\n              ...dataInStore.me,\n              groupsUserNotIn: dataInStore.me.groupsUserNotIn.concat(response.data.leaveGroup)\n            }\n          }\n        })\n        console.log(response.data)\n        store.modify({\n          id: `User:${user.data.me.id}`,\n          fields: {\n            groups(listInCache){\n              return listInCache.filter(group => group.__ref !== `Group:${response.data.leaveGroup.id}`)\n            }\n          }\n        })\n      }\n    }\n  })\n  const name= useParams().name\n  console.log(name)\n  const group = useQuery(GET_GROUP, { variables: { name } })\n  const leave = async () => {\n    await leaveGroup({ variables: { id: group.data.group.id } })\n    setNotification({ message: `Left group ${group.data.group.name}`, error: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n    history.push(\"/\")\n  }\n  if(!group.data){\n    return(\n      <Loader/>\n    )\n  }\n  const groupName = group.data.group.name\n  return(\n    <div>\n      <span>\n        { groupName }\n        <button id=\"leave-button\" onClick={ leave }>leave</button>\n      </span>\n      <Users users = {group.data.group.users} admins = {group.data.group.admins} group={group.data.group} setNotification={setNotification}/>\n      <button id=\"group-messages-button\"><Link to={`/groups/${group.data.group.name}/messages`}>Messages</Link></button>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )\n}\n\nexport default Group","import React from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport { GET_USER } from \"../graphql/queries\"\n\nconst Event = () => {\n  const history = useHistory()\n  const username = useParams().username\n  const user = useQuery(GET_USER, { variables: { username } })\n  console.log(user)\n  if(!user.data){\n    return(\n      <div>\n        ...loading\n      </div>\n    )\n  }\n\n  return(\n    <div>\n      {user.data.user.name}\n      <button onClick = {() => history.push(\"/sendMessage\")}>Send Message</button>\n    </div>\n  )\n}\n\nexport default Event","import React from \"react\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { GROUPS_THAT_USER_IS_NOT_IN } from \"../graphql/queries\"\nimport { JOIN_REQUEST } from \"../graphql/mutations\"\nimport { Link } from \"react-router-dom\"\nimport Loader from \"./Loader\"\n\nconst JoinGroupElement = ({ group, setNotification }) => {\n  const [ request ] = useMutation(JOIN_REQUEST,{\n    onError: error => {\n      console.log(error)\n    }\n  })\n\n  const sendRequest = () => {\n    request({ variables: { group: group.name } })\n    setNotification({ message: `Send joining request to ${group.name}`, error: false })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  return(\n    <li>\n      <span>\n        {group.name}\n        <button onClick={sendRequest}>Request</button>\n      </span>\n    </li>\n  )\n}\n\nconst JoinGroup = ({ setNotification }) => {\n  const groups = useQuery(GROUPS_THAT_USER_IS_NOT_IN)\n  if(!groups.data){\n    return(\n      <Loader/>\n    )\n  }\n  return (\n    <div>\n      Hello World\n      <ul>\n        {groups.data ? groups.data.me.groupsUserNotIn.map(group => (<JoinGroupElement setNotification = {setNotification} key = {group.id} group={group} />)) : null }\n      </ul>\n      <button id=\"homepage-button\"> <Link to=\"/\">Home Page</Link></button>\n    </div>\n  )\n}\n\nexport default JoinGroup","import React from \"react\"\n\nconst Notification= ({ notification }) => {\n  if(notification===null){\n    return null\n  }\n  let style = \"success\"\n  if(notification.error){\n    style=\"error\"\n  }\n  return(\n    <div id=\"notification\"className={style}>\n      {notification.message}\n    </div>\n  )\n}\n\nexport default Notification","import React from \"react\"\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { USER_MESSAGES } from \"../graphql/queries\"\nimport Loader from \"./Loader\"\nimport { useHistory } from \"react-router-dom\"\nimport { READ_MESSAGE } from \"../graphql/mutations\"\nimport { DELETE_MESSAGE } from \"../graphql/mutations\"\n\nconst Messages = () => {\n  const messages = useQuery(USER_MESSAGES)\n  console.log(messages)\n  if(!messages.data){\n    return(\n      <Loader/>\n    )\n  }\n\n  let messagesData = [...messages.data.me.messages]\n  console.log(messagesData)\n  messagesData.sort((a,b) => {\n    console.log(a,b)\n    if(!a.read){\n      return 0\n    }\n    if(!b.read){\n      return -1\n    }\n    return 0\n  })\n  messagesData.reverse()\n  console.log(messagesData)\n  const displayMessages = messagesData.map(\n    message => (<MessageListElement message={message} key={message.id}/>)\n  )\n  console.log(messages)\n  if(messagesData.length === 0){\n    return(\n      <div>\n        <h1>No messages</h1>\n      </div>\n    )\n  }\n  return(\n    <ul>\n      {displayMessages}\n    </ul>\n  )\n}\n\nconst MessageListElement = ({ message }) => {\n  const [setAsRead] = useMutation(READ_MESSAGE)\n  const [deleteMessageMutation] = useMutation(DELETE_MESSAGE)\n  const history = useHistory()\n  const readMessage = (id) => {\n    setAsRead({ variables: { id } })\n    history.push(`/messages/${id}`)\n  }\n\n  const deleteMessage = (id) => {\n    deleteMessageMutation({ variables: { id } })\n  }\n\n  return(\n    <li>\n      <span>\n        <p onClick={() => readMessage(message.id)} style={{ display: \"inline-block\", marginRight: 10 }}>{message.title}</p>\n        {message.read ? null : <b>unread</b> }\n        <button onClick = {() => deleteMessage(message.id)}> Delete </button>\n      </span>\n\n    </li>\n  )\n}\n\nexport default Messages","import React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport Loader from \"./Loader\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { GET_MESSAGE } from \"../graphql/queries\"\nimport { ADD_TO_GROUP } from \"../graphql/mutations\"\nconst Message = () => {\n  const id = useParams().id\n  const message = useQuery(GET_MESSAGE, { variables: { id } })\n  console.log(message)\n  if(!message.data){\n    return(\n      <Loader/>\n    )\n  }\n  const messageData = message.data.message\n  return(\n    <div>\n      <span style={{ marginRight: 10 }}>\n      title:\n      </span>\n      <h2 style={{ display: \"inline-block\" }}>{messageData.title}</h2>\n      <br/>\n      <span>\n      sender: {messageData.sender}\n      </span>\n      <br/>\n      <span>\n      receivers: {messageData.receivers}\n      </span>\n      <MessageType message={messageData}/>\n    </div>\n  )\n}\nconst MessageType = ({ message }) => {\n  if(message.type === \"Joining request\"){\n    return(\n      <JoiningRequest message={message}/>\n    )\n  }\n  else if(message.type === \"User message\"){\n    return(\n      <UserMessage message={message}/>\n    )\n  }\n  return(\n    <div>\n    </div>\n  )\n}\nconst JoiningRequest = ({ message }) => {\n  const [add] = useMutation(ADD_TO_GROUP)\n  const AcceptRequest = async () => {\n    await add({ variables: { group: message.group, user: message.sender } })\n  }\n  console.log(message)\n  return(\n    <div>\n      <br/>\n      <button onClick={AcceptRequest}>Accept request</button>\n    </div>\n  )\n}\n\nconst UserMessage = ({ message }) => {\n  return(\n    <div>\n      <br/>\n      <div>\n        content:\n        {message.content}\n      </div>\n    </div>\n  )\n}\n\nexport default Message","import React from \"react\"\nimport { USERS_NOT_IN_GROUP } from \"../graphql/queries\"\nimport { useParams, useHistory } from \"react-router-dom\"\nimport Loader from \"./Loader\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { ADD_TO_GROUP } from \"../graphql/mutations\"\n\nconst GroupAddUsers = () => {\n  const history = useHistory()\n  const name= useParams().name\n  const usersNotInGroup = useQuery(USERS_NOT_IN_GROUP, { variables: { name } })\n  const [add] = useMutation(ADD_TO_GROUP, {\n    update: (store, response) => {\n      store.modify({\n        id: `Group:${usersNotInGroup.data.group.id}`,\n        fields: {\n          users(listInCache){\n            return listInCache.concat({ __ref: `User:${response.data.addToGroup.id}` })\n          },\n          usersNotInGroup(listInCache){\n            return listInCache.filter(user => user.__ref !== `User:${response.data.addToGroup.id}` )\n          }\n        }\n      })\n\n    }\n  })\n  console.log(usersNotInGroup)\n  const addUser = async (username) => {\n    const response = await add({ variables: { group: name, user: username } })\n    console.log(response)\n  }\n  if(!usersNotInGroup.data){\n    return(\n      <Loader/>\n    )\n  }\n  const displayUsers = usersNotInGroup.data.group.usersNotInGroup.map(user => (<li key={user.id}>{user.username} <button onClick={() => addUser(user.username) }> add </button></li>))\n  return(\n    <div>\n      <ul>\n        {displayUsers}\n      </ul>\n      <button onClick={() => history.push(`/groups/${usersNotInGroup.data.group.name}`)}>Back</button>\n    </div>\n  )\n}\n\nexport default GroupAddUsers","import React from \"react\"\n\nconst GroupMessages = () => {\n  return(\n    <div>\n      Messages\n    </div>\n  )\n}\n\nexport default GroupMessages","import React from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation } from \"@apollo/client\"\nimport { SEND_USER_MESSAGE } from \"../graphql/mutations\"\n\n\n\n\nconst SendMessage = () => {\n  const [sendMessage] = useMutation(SEND_USER_MESSAGE)\n  const onSubmit = ({ receivers, title, message }) => {\n    let receiversList = receivers.split(\",\")\n    receiversList = receiversList.map(receiver => receiver.replace(/(^[ '^$*#&]+)|([ '^$*#&]+$)/g, \"\"))\n    console.log(receiversList)\n    sendMessage({ variables: { receivers: receiversList, message, title } })\n  }\n  return(\n    <div>\n      <h1>Send Message</h1>\n      <div>\n        <Formik\n          initialValues={{ receivers: \"\", message: \"\", title: \"\" }}\n          onSubmit={onSubmit}\n        >\n          {({\n            values,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isValid,\n          /* and other goodies */\n          }) => (\n            <form onSubmit={handleSubmit}>\n           receivers: <input\n                id=\"receivers\"\n                type=\"text\"\n                name=\"receivers\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.receivers}\n              />\n              <br/>\n            title: <input\n                id=\"title\"\n                type=\"text\"\n                name=\"title\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.title}\n              />\n              <br/>\n              message:\n              <br/>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                onChange={handleChange}\n                onBlur = {handleBlur}\n                value={values.message}/>\n              { (isValid) ?             <button type=\"submit\" id=\"submit-button\">\n             Send\n              </button> : null}\n            </form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  )\n}\n\nexport default SendMessage","import { useApolloClient ,useMutation } from \"@apollo/client\"\nimport { LOGIN, SIGN_IN } from \"../graphql/mutations\"\nimport { useHistory } from \"react-router-dom\"\n\n\nconst useLogin = (setToken, setNotification) => {\n  const history = useHistory()\n  const client = useApolloClient()\n  console.log(\"history\", history)\n  const getErrorMessage = (message) => {\n    if(message.startsWith(\"User validation failed: username:\")){\n      if(message.includes(\"unique\")){\n        return \"Username needs to be unique\"\n      }\n    }\n    return message\n  }\n  const [ signInMutation] = useMutation(SIGN_IN, {\n    onError: (error) => {\n      let message = getErrorMessage(error.graphQLErrors[0].message)\n      setNotification({ message, error: true })\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n\n  })\n  const [ loginMutation ] = useMutation(LOGIN, {\n    onError: (error) => {\n      setNotification({ message: error.graphQLErrors[0].message, error: true })\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n  })\n\n  const login = async ({ username, password }) => {\n    const result = await loginMutation({ variables: { username, password } })\n    console.log(result)\n    if(result.data.login.value){\n      setToken(result.data.login.value)\n      localStorage.setItem(\"user-token\", result.data.login.value)\n      history.push(\"/\")\n    }\n\n  }\n\n  const logout =  () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  const signIn = async( username, name, password ) => {\n    const result = await signInMutation({ variables: { username, name, password } })\n    return result\n  }\n\n\n\n  return{\n    login,\n    logout,\n    signIn\n  }\n}\n\nexport default useLogin","\nimport Login from \"./components/Login\"\nimport React, { useState } from \"react\"\nimport SignIn from \"./components/SignIn\"\n\nimport AddEvent from \"./components/AddEvent\"\nimport AddGroup from \"./components/AddGroup\"\nimport Event from \"./components/Event\"\nimport HomePage from \"./components/HomePage\"\nimport Groups from \"./components/Groups\"\nimport Group from \"./components/Group\"\nimport User from \"./components/User\"\nimport JoinGroup from \"./components/JoinGroup\"\nimport Notification from \"./components/Notification\"\nimport Messages from \"./components/Messages\"\nimport Message from \"./components/Message\"\nimport GroupAddUsers from \"./components/GroupAddUsers\"\nimport GroupMessages from \"./components/GroupMessages\"\nimport SendMessage from \"./components/SendMessage\"\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\n\nimport useLogin from \"./hooks/useLogin\"\n\n\nconst App = () => {\n  const [ notification, setNotification ] = useState(null)\n\n\n\n  return (\n    <div>\n      <Notification notification={notification}/>\n      <Router>\n        <AppRouter setNotification={setNotification}/>\n      </Router>\n    </div>\n\n  )\n}\n\nconst AppRouter = ({ setNotification }) => {\n  const [token, setToken] = useState(localStorage.getItem(\"user-token\"))\n  const { logout, login, signIn } = useLogin(setToken, setNotification)\n  return(\n    <Switch>\n      <Route path =\"/sendMessage\">\n        { token ? <SendMessage/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path =\"/messages/:id\">\n        { token ? <Message/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path =\"/messages\">\n        { token ? <Messages/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path=\"/joinGroup\">\n        {token ? <JoinGroup setNotification = {setNotification}/> : <Redirect to=\"/login\"/> }\n      </Route>\n      <Route path=\"/users/:username\">\n        {token ? <User/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path =\"/groups/:name/messages\">\n        { token ? <GroupMessages setNotification={setNotification}/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path =\"/groups/:name/addusers\">\n        { token ? <GroupAddUsers setNotification={setNotification}/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path =\"/groups/:name\">\n        { token ? <Group setNotification={setNotification}/>: <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path=\"/groups\">\n        {token ? <Groups setNotification= {setNotification}/> : <Redirect to=\"/login\"/> }\n      </Route>\n      <Route path=\"/addGroup\">\n        { token ? <AddGroup setNotification = {setNotification}/> : <Redirect to=\"/login\"/> }\n      </Route>\n      <Route path=\"/SignIn\">\n        <SignIn login = {login} signIn = {signIn}/>\n      </Route>\n      <Route path=\"/login\">\n        <Login login = {login} />\n      </Route>\n      <Route path=\"/events/:id\">\n        {token ? <Event setNotification={setNotification}/> : <Redirect to=\"/login\"/> }\n      </Route>\n      <Route path=\"/addevent\">\n        {token ? <AddEvent setNotification={setNotification}/> : <Redirect to=\"/login\"/>}\n      </Route>\n      <Route path=\"/\">\n        {token ? <HomePage logout={logout}/> : <Redirect to=\"/login\"/>}\n      </Route>\n    </Switch>\n  )\n}\n\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { setContext } from \"apollo-link-context\"\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"))\n"],"sourceRoot":""}