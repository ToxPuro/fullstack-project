{"version":3,"sources":["components/PreviewCalendar.js","graphql/mutations.js","graphql/queries.js","components/ChoiceCalendar.js","components/AddEvent.js","components/Login.js","components/Events.js","components/EventCalendar.js","components/Event.js","App.js","index.js"],"names":["Header","month","setMonth","className","onClick","dateFns","Days","startDate","shortWeekDaysArray","Array","from","map","e","i","Cells","monthStart","monthEnd","endDate","rows","days","day","formattedDate","cloneDay","push","CalendarDate","useState","clicked","setClicked","onDateClick","PreviewCalendar","Date","LOGIN","gql","ADD_EVENT","USER_GROUPS","USER_EVENTS","EVENT","setDates","dates","concat","ChoiceCalendar","AddEvent","choice","setChoice","groups","useQuery","options","data","userGroups","group","value","name","label","useMutation","addEvent","initialValues","onSubmit","resetForm","variables","values","handleChange","handleBlur","handleSubmit","type","onChange","onBlur","selectedOption","Login","setToken","onError","error","console","log","graphQLErrors","message","login","result","useEffect","token","localStorage","setItem","username","password","id","Events","displayEvents","events","event","to","includes","EventCalendar","Event","useParams","App","getItem","client","useApolloClient","path","userEvents","Button","clear","resetStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a50454dc.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst PreviewCalendar = () => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = () => {\n    setClicked(!clicked)\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick()}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default PreviewCalendar","import { gql } from \"@apollo/client\"\n\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String!){\n  login(username: $username, password: $password){value}\n}`\n\nexport const ADD_EVENT = gql`\nmutation addEvent($name: String! $group: String! $dates: [String!]!){\n  addEvent(name: $name, group: $group dates: $dates){name}\n}`\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const ME = gql`\nquery{\n  me{\n    name\n  }\n}`\n\nexport const ALL_EVENTS = gql`\nquery{\n  allEvents{\n    name\n  }\n}`\n\nexport const USER_GROUPS = gql`\nquery{\n  userGroups{name}\n}`\n\nexport const USER_EVENTS = gql`\nquery{\n  userEvents{\n    name\n    id\n  }\n}`\n\nexport const EVENT = gql`\nquery event($id: ID!){\n  event(id: $id){\n    name\n    id\n    dates\n  }\n}`\n","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst ChoiceCalendar = ({ setDates, dates }) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} setDates = {setDates} dates={dates}/>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, setDates, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} setDates={setDates} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart,setDates, dates }) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n    setDates(dates.concat(dateFns.format(day, \"DDD\")))\n  }\n\n  if(clicked){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n        onClick = {() => onDateClick(day)}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default ChoiceCalendar","import React, { useState } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { ADD_EVENT } from \"../graphql/mutations\"\nimport { USER_GROUPS } from \"../graphql/queries\"\nimport Select from \"react-select\"\nimport ChoiceCalendar from \"./ChoiceCalendar\"\n\nconst AddEvent = () => {\n  const [ dates, setDates] = useState([])\n  const [choice, setChoice] = useState(null)\n  const handleChoice = selectedOption => {\n    setChoice(selectedOption.value)\n  }\n  const groups = useQuery(USER_GROUPS)\n  let options = []\n  if(groups.data){\n    options = groups.data.userGroups.map(group => (\n      { value: group.name, label: group.name }\n    ))\n  }\n  const [addEvent ] = useMutation(ADD_EVENT)\n  return(\n    <div>\n      <h1>New Event</h1>\n      <Formik\n        initialValues={{ name: \"\" }}\n        onSubmit={({ name }, { resetForm }) => {\n          addEvent({ variables:{ name, group: choice, dates } })\n          resetForm({})\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           event name: <input\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n            />\n            <button type=\"submit\">\n             Submit\n            </button>\n          </form>\n        )}\n      </Formik>\n      <Select options={options} onChange={handleChoice} />\n      <h2>Choose possible days</h2>\n      <ChoiceCalendar dates={dates} setDates={setDates}/>\n    </div>\n  )}\n\n\nexport default AddEvent","import React, { useEffect } from \"react\"\nimport { Formik } from \"formik\"\nimport { useMutation } from \"@apollo/client\"\nimport { LOGIN } from \"../graphql/mutations\"\n\nconst Login = ({ setToken }) => {\n\n  const [ login, result ] = useMutation(LOGIN, {\n    onError: (error) => {\n      console.log(error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if(result.data){\n      const token = result.data.login.value\n      setToken(token)\n      localStorage.setItem(\"user-token\", token)\n    }\n  }, [result.data, setToken])\n\n  return(\n    <div>\n      <h1>Login</h1>\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={({ username, password }, { resetForm }) => {\n          login({ variables: { username, password } })\n          resetForm({ values: { username: \"\", password: \"\" } })\n        }}\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit\n          /* and other goodies */\n        }) => (\n          <form onSubmit={handleSubmit}>\n           username: <input\n              id=\"username\"\n              type=\"text\"\n              name=\"username\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.username}\n            />\n\n            <br/>\n\n           password: <input\n              id=\"password\"\n              type= \"password\"\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.password}\n            />\n            <br/>\n            <button type=\"submit\" id=\"login-button\">\n             Login\n            </button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  )}\n\n\nexport default Login","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nconst Events = ({ events }) => {\n  const displayEvents = events.map(event => (<li key={event.id}><Link to={`/events/${event.id}`}>{event.name}</Link></li>))\n\n  return(\n    <div>\n      <ul>\n        {displayEvents}\n      </ul>\n    </div>\n  )\n}\n\nexport default Events","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport \"../App.css\"\n\nconst EventCalendar = ({ dates }) => {\n\n\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} dates={dates}/>\n      <ul>{dates}</ul>\n    </div>\n  )\n}\n\nconst Header = ({ month, setMonth }) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  )\n\n}\n\nconst Days = ({ month }) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), \"EEEEEE\")}\n  </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({ month, dates }) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({ formattedDate, day, monthStart, dates }) => {\n  if(dates.includes(dateFns.format(day, \"DDD\"))){\n    return(\n      <div\n        className={\"col cell clicked\"}\n        key={day}\n      >\n        <span className=\"number\">{formattedDate}</span>\n        <span className=\"bg\">{formattedDate}</span>\n      </div>\n    )\n  }\n\n  return(\n    <div\n      className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n      key={day}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n  )\n}\n\nexport default EventCalendar","import React from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { useParams } from \"react-router-dom\"\nimport { EVENT } from \"../graphql/queries\"\nimport EventCalendar from \"./EventCalendar\"\n\nconst Event = () => {\n  const id = useParams().id\n  const event = useQuery(EVENT, { variables: { id } })\n\n  if(!event.data){\n    return(\n      <div>\n        ...loading\n      </div>\n    )\n  }\n\n  return(\n    <div>\n      {event.data.event.name}\n      <EventCalendar dates = {event.data.event.dates}/>\n    </div>\n  )\n}\n\nexport default Event","import PreviewCalendar from \"./components/PreviewCalendar\"\nimport AddEvent from \"./components/AddEvent\"\nimport Login from \"./components/Login\"\nimport Events from \"./components/Events\"\nimport Event from \"./components/Event\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport { useState } from \"react\"\nimport { useApolloClient, useQuery } from \"@apollo/client\"\nimport Button from \"react-bootstrap/Button\"\nimport { USER_EVENTS } from \"./graphql/queries\"\nimport React from \"react\"\n\n\nconst App = () => {\n\n  const events = useQuery(USER_EVENTS)\n\n  const [ token, setToken ] = useState(localStorage.getItem(\"user-token\"))\n  const client = useApolloClient()\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  if(!token){\n    return(\n      <Login setToken={setToken}/>\n    )\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/events/:id\">\n          <Event/>\n        </Route>\n        <Route path=\"/addevent\">\n          <AddEvent/>\n        </Route>\n        <Route path=\"/\">\n          <PreviewCalendar/>\n          {events.data ? <Events events={events.data.userEvents}/> : null }\n          <Button><Link to=\"/addevent\">add event</Link></Button>\n          <button onClick={logout}>Log Out</button>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport { setContext } from \"apollo-link-context\"\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\"\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user-token\")\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: \"/graphql\" })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"))\n"],"sourceRoot":""}