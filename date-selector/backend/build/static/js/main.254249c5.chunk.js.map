{"version":3,"sources":["components/PreviewCalendar.js","graphql/mutations.js","graphql/queries.js","components/ChoiceCalendar.js","components/AddEvent.js","components/Login.js","App.js","index.js"],"names":["Header","month","setMonth","className","onClick","dateFns","Days","startDate","shortWeekDaysArray","Array","from","map","e","i","Cells","monthStart","monthEnd","endDate","rows","days","day","formattedDate","cloneDay","push","CalendarDate","useState","clicked","setClicked","onDateClick","PreviewCalendar","Date","LOGIN","gql","ADD_EVENT","USER_GROUPS","setDates","dates","concat","toString","ChoiceCalendar","AddEvent","choice","setChoice","groups","useQuery","options","data","userGroups","group","value","name","label","useMutation","addEvent","initialValues","onSubmit","resetForm","variables","values","handleChange","errors","touched","handleBlur","handleSubmit","type","onChange","onBlur","selectedOption","Login","setToken","login","result","useEffect","token","localStorage","setItem","username","password","App","getItem","client","useApolloClient","path","Button","to","clear","resetStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"kTAgBMA,EAAS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAWtB,OACE,sBAAKC,UAAU,yBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,OAAOC,QAPV,WAChBF,EAASG,IAAkBJ,EAAM,KAM7B,4BAIF,qBAAKE,UAAU,iBAAf,SACE,+BACGE,IAAeJ,EAnBL,kBAsBf,qBAAKE,UAAU,cAAcC,QApBf,WAChBF,EAASG,IAAkBJ,EAAO,KAmBhC,SACE,qBAAKE,UAAU,OAAf,iCAOFG,EAAO,SAAC,GAAa,IAAZL,EAAW,EAAXA,MAETM,EAAYF,IAAoBJ,GAE9BO,EAAqBC,MAAMC,KAAKD,MAAM,IAAIE,KAAI,SAACC,EAAGC,GAAJ,OAAW,qBAAKV,UAAU,iBAAf,SAC5DE,IAAeA,IAAgBE,EAAWM,GAAI,WADmDA,MAIpG,OACE,qBAAKV,UAAU,WAAf,SAA2BK,KAIzBM,EAAQ,SAAC,GAcb,IAd0B,IAAZb,EAAW,EAAXA,MAERc,EAAaV,IAAqBJ,GAClCe,EAAWX,IAAmBU,GAC9BR,EAAYF,IAAoBU,GAChCE,EAAUZ,IAAkBW,GAG5BE,EAAO,GAETC,EAAO,GACPC,EAAMb,EACNc,EAAgB,GAEdD,GAAOH,GAAQ,CACnB,IAAI,IAAIJ,EAAI,EAAGA,EAAE,EAAGA,IAAI,CACtBQ,EAAgBhB,IAAee,EAThB,KAUf,IAAME,EAAWF,EACjBD,EAAKI,KACH,cAAC,EAAD,CAAcF,cAAiBA,EAAeD,IAAKE,EAAUP,WAAYA,KAE3EK,EAAMf,IAAgBe,EAAK,GAE7BF,EAAKK,KACH,qBAAKpB,UAAU,MAAf,SACGgB,GADuBC,IAI5BD,EAAK,GAGP,OACE,qBAAKhB,UAAU,OAAf,SAAuBe,KAKrBM,EAAe,SAAC,GAAsC,IAArCH,EAAoC,EAApCA,cAAeD,EAAqB,EAArBA,IAAKL,EAAgB,EAAhBA,WAAgB,EAEzBU,oBAAS,GAFgB,mBAEjDC,EAFiD,KAExCC,EAFwC,KAInDC,EAAc,SAAAR,GAClBO,GAAYD,IAGd,OAAGA,EAEC,sBACAvB,UAAS,mBAETC,QAAW,kBAAMwB,KAHjB,UAKA,sBAAMzB,UAAU,SAAhB,SAA0BkB,IAC1B,sBAAMlB,UAAU,KAAhB,SAAsBkB,MAJjBD,GASP,sBACAjB,UAAS,mBAAeE,IAAoBe,EAAKL,GAA2B,GAAb,YAE/DX,QAAW,kBAAMwB,KAHjB,UAKA,sBAAMzB,UAAU,SAAhB,SAA0BkB,IAC1B,sBAAMlB,UAAU,KAAhB,SAAsBkB,MAJjBD,IASMS,EA5HS,WAAO,IAAD,EACAJ,mBAAS,IAAIK,MADb,mBACpB7B,EADoB,KACbC,EADa,KAE5B,OACE,sBAAKC,UAAU,WAAf,UACE,cAAC,EAAD,CAAQF,MAAOA,EAAOC,SAAUA,IAChC,cAAC,EAAD,CAAMD,MAAOA,IACb,cAAC,EAAD,CAAOA,MAAOA,Q,yBCTP8B,EAAQC,cAAH,gJAKLC,EAAYD,cAAH,gKCSTE,GAdKF,cAAH,2DAOWA,cAAH,kEAOIA,cAAH,0D,SCAlBhC,EAAS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAWtB,OACE,sBAAKC,UAAU,yBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,OAAOC,QAPV,WAChBF,EAASG,IAAkBJ,EAAM,KAM7B,4BAIF,qBAAKE,UAAU,iBAAf,SACE,+BACGE,IAAeJ,EAnBL,kBAsBf,qBAAKE,UAAU,cAAcC,QApBf,WAChBF,EAASG,IAAkBJ,EAAO,KAmBhC,SACE,qBAAKE,UAAU,OAAf,iCAOFG,EAAO,SAAC,GAAa,IAAZL,EAAW,EAAXA,MAETM,EAAYF,IAAoBJ,GAE9BO,EAAqBC,MAAMC,KAAKD,MAAM,IAAIE,KAAI,SAACC,EAAGC,GAAJ,OAAW,qBAAKV,UAAU,iBAAf,SAC5DE,IAAeA,IAAgBE,EAAWM,GAAI,WADmDA,MAIpG,OACE,qBAAKV,UAAU,WAAf,SAA2BK,KAIzBM,EAAQ,SAAC,GAcb,IAd2C,IAA7Bb,EAA4B,EAA5BA,MAAOkC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAEzBrB,EAAaV,IAAqBJ,GAClCe,EAAWX,IAAmBU,GAC9BR,EAAYF,IAAoBU,GAChCE,EAAUZ,IAAkBW,GAG5BE,EAAO,GAETC,EAAO,GACPC,EAAMb,EACNc,EAAgB,GAEdD,GAAOH,GAAQ,CACnB,IAAI,IAAIJ,EAAI,EAAGA,EAAE,EAAGA,IAAI,CACtBQ,EAAgBhB,IAAee,EAThB,KAUf,IAAME,EAAWF,EACjBD,EAAKI,KACH,cAAC,EAAD,CAAcF,cAAiBA,EAAeD,IAAKE,EAAUP,WAAYA,EAAYoB,SAAUA,EAAUC,MAAOA,KAElHhB,EAAMf,IAAgBe,EAAK,GAE7BF,EAAKK,KACH,qBAAKpB,UAAU,MAAf,SACGgB,GADuBC,IAI5BD,EAAK,GAGP,OACE,qBAAKhB,UAAU,OAAf,SAAuBe,KAKrBM,EAAe,SAAC,GAAsD,IAArDH,EAAoD,EAApDA,cAAeD,EAAqC,EAArCA,IAAKL,EAAgC,EAAhCA,WAAWoB,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAAW,EAEzCX,oBAAS,GAFgC,mBAEjEC,EAFiE,KAExDC,EAFwD,KAInEC,EAAc,SAAAR,GAClBO,GAAYD,GACZS,EAASC,EAAMC,OAAOjB,EAAIkB,cAG5B,OAAGZ,EAEC,sBACAvB,UAAS,mBAETC,QAAW,kBAAMwB,EAAYR,IAH7B,UAKA,sBAAMjB,UAAU,SAAhB,SAA0BkB,IAC1B,sBAAMlB,UAAU,KAAhB,SAAsBkB,MAJjBD,GASP,sBACAjB,UAAS,mBAAeE,IAAoBe,EAAKL,GAA2B,GAAb,YAE/DX,QAAW,kBAAMwB,EAAYR,IAH7B,UAKA,sBAAMjB,UAAU,SAAhB,SAA0BkB,IAC1B,sBAAMlB,UAAU,KAAhB,SAAsBkB,MAJjBD,IASMmB,EA7HQ,SAAC,GAAuB,IAAtBJ,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAAW,EAChBX,mBAAS,IAAIK,MADG,mBACpC7B,EADoC,KAC7BC,EAD6B,KAE5C,OACE,sBAAKC,UAAU,WAAf,UACE,cAAC,EAAD,CAAQF,MAAOA,EAAOC,SAAUA,IAChC,cAAC,EAAD,CAAMD,MAAOA,IACb,cAAC,EAAD,CAAOA,MAAOA,EAAOkC,SAAYA,EAAUC,MAAOA,QCmDzCI,EAtDG,WAAO,IAAD,EACKf,mBAAS,IADd,mBACdW,EADc,KACPD,EADO,OAEMV,mBAAS,MAFf,mBAEfgB,EAFe,KAEPC,EAFO,KAMfC,EAASC,mBAASV,GACpBW,EAAU,GACXF,EAAOG,OACTD,EAAUF,EAAOG,KAAKC,WAAWpC,KAAI,SAAAqC,GAAK,MACxC,CAACC,MAAOD,EAAME,KAAMC,MAAOH,EAAME,UAVf,MAaDE,sBAAYnB,GAAzBoB,EAbc,oBAcrB,OACA,gCACE,2CACA,cAAC,IAAD,CACEC,cAAe,CAAEJ,KAAM,IACvBK,SAAU,cAA0B,IAAxBL,EAAuB,EAAvBA,KAAQM,EAAe,EAAfA,UAClBH,EAAS,CAACI,UAAU,CAACP,OAAMF,MAAOP,EAAQL,WAC1CoB,EAAU,KAJd,SAOG,gBACCE,EADD,EACCA,OAGAC,GAJD,EAECC,OAFD,EAGCC,QAHD,EAICF,cACAG,EALD,EAKCA,WACAC,EAND,EAMCA,aAND,OASC,uBAAMR,SAAUQ,EAAhB,yBACc,uBACVC,KAAK,OACLd,KAAK,OACLe,SAAUN,EACVO,OAAQJ,EACRb,MAAOS,EAAOR,OAEhB,wBAAQc,KAAK,SAAb,0BAMN,cAAC,IAAD,CAAQnB,QAASA,EAASoB,SA5CR,SAAAE,GACnBzB,EAAUyB,EAAelB,UA4CxB,sDACA,cAAC,EAAD,CAAgBb,MAAOA,EAAOD,SAAUA,QCQ9BiC,EA5DA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEHjB,sBAAYrB,GAFT,mBAErBuC,EAFqB,KAEdC,EAFc,KAY7B,OARAC,qBAAU,WACR,GAAGD,EAAOzB,KAAK,CACb,IAAM2B,EAAQF,EAAOzB,KAAKwB,MAAMrB,MAChCoB,EAASI,GACTC,aAAaC,QAAQ,aAAcF,MAEpC,CAACF,EAAOzB,OAGV,gCACE,uCACA,cAAC,IAAD,CACEQ,cAAe,CAAEsB,SAAU,GAAIC,SAAU,IACzCtB,SAAU,cAAwC,IAAtCqB,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAAYrB,EAAe,EAAfA,UAChCc,EAAM,CAAEb,UAAW,CAACmB,WAAUC,cAC9BrB,EAAU,CAACE,OAAQ,CAACkB,SAAU,GAAIC,SAAU,OAJhD,SAOG,gBACCnB,EADD,EACCA,OAGAC,GAJD,EAECC,OAFD,EAGCC,QAHD,EAICF,cACAG,EALD,EAKCA,WACAC,EAND,EAMCA,aAND,OASC,uBAAMR,SAAUQ,EAAhB,uBACY,uBACRC,KAAK,OACLd,KAAK,WACLe,SAAUN,EACVO,OAAQJ,EACRb,MAAOS,EAAOkB,WAGhB,uBATF,aAWY,uBACVZ,KAAM,WACNd,KAAK,WACLe,SAAUN,EACVO,OAAQJ,EACRb,MAAOS,EAAOmB,WAEd,uBACA,wBAAQb,KAAK,SAAb,8B,0BCdIc,EAhCH,WAAO,IAAD,EACYrD,mBAASiD,aAAaK,QAAQ,eAD1C,mBACRN,EADQ,KACDJ,EADC,KAEVW,EAASC,4BAQf,OAAIR,EAOF,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOS,KAAK,YAAZ,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,IAAZ,UACE,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,UAAQ,cAAC,IAAD,CAAMC,GAAG,YAAT,yBACR,wBAAQhF,QArBD,WACbiE,EAAS,MACTK,aAAaW,QACbL,EAAOM,cAkBD,6BAbJ,cAAC,EAAD,CAAOjB,SAAUA,K,SCfjBkB,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BjB,EAAQC,aAAaK,QAAQ,cACnC,MAAO,CACLW,QAAQ,2BACHA,GADE,IAELC,cAAelB,EAAK,iBAAaA,GAAU,WAK3CmB,EAAW,IAAIC,WAAS,CAAEC,IAAK,aAE/Bd,EAAS,IAAIe,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,KAAMX,EAASlD,OAAOuD,KAGxBO,IAASC,OACT,cAAC,iBAAD,CAAgBpB,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFqB,SAASC,eAAe,W","file":"static/js/main.254249c5.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport '../App.css'\nimport { findByPlaceholderText } from \"@testing-library/dom\"\n\nconst PreviewCalendar = () => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month}/>\n    </div>\n  )\n}\n\nconst Header = ({month, setMonth}) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  );\n\n}\n\nconst Days = ({month}) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), 'EEEEEE')}\n    </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({month}) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({formattedDate, day, monthStart}) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n  }\n\n  if(clicked){\n    return(\n      <div\n      className={`col cell clicked`}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n    )\n  }\n  return(\n    <div\n    className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n    key={day}\n    onClick = {() => onDateClick(day)}\n  >\n    <span className=\"number\">{formattedDate}</span>\n    <span className=\"bg\">{formattedDate}</span>\n  </div>\n  )\n}\n\nexport default PreviewCalendar","import { gql} from '@apollo/client'\n\nexport const LOGIN = gql`\nmutation login($username: String!, $password: String!){\n  login(username: $username, password: $password){value}\n}`\n\nexport const ADD_EVENT = gql`\nmutation addEvent($name: String! $group: String! $dates: [String!]!){\n  addEvent(name: $name, group: $group dates: $dates){name}\n}`\n\n\n\n","import { gql} from '@apollo/client'\n\nexport const ME = gql`\nquery{\n  me{\n    name\n  }\n}`\n\nexport const ALL_EVENTS = gql`\nquery{\n  allEvents{\n    name\n  }\n}`\n\nexport const USER_GROUPS = gql`\nquery{\n  userGroups{name}\n}`\n","import React, { useState } from \"react\"\nimport * as dateFns from \"date-fns\"\nimport '../App.css'\nimport { findByPlaceholderText } from \"@testing-library/dom\"\n\nconst ChoiceCalendar = ({setDates, dates}) => {\n  const [ month, setMonth ] = useState(new Date())\n  return(\n    <div className=\"calendar\">\n      <Header month={month} setMonth={setMonth}/>\n      <Days month={month}/>\n      <Cells month={month} setDates = {setDates} dates={dates}/>\n    </div>\n  )\n}\n\nconst Header = ({month, setMonth}) => {\n  const dateFormat = \"MMMM YYYYY\"\n\n  const nextMonth = () => {\n    setMonth(dateFns.addMonths(month, 1))\n  }\n\n  const prevMonth = () => {\n    setMonth(dateFns.subMonths(month,1))\n  }\n\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>\n          {dateFns.format(month, dateFormat)}\n        </span>\n      </div>\n      <div className=\"col col-end\" onClick={nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  );\n\n}\n\nconst Days = ({month}) => {\n\n  let startDate = dateFns.startOfWeek(month)\n\n  const shortWeekDaysArray = Array.from(Array(7)).map((e, i) => (<div className=\"col col-center\" key={i}>\n    {dateFns.format(dateFns.addDays(startDate, i), 'EEEEEE')}\n    </div> ))\n\n  return(\n    <div className=\"days row\">{shortWeekDaysArray}</div>\n  )\n}\n\nconst Cells = ({month, setDates, dates}) => {\n\n  const monthStart = dateFns.startOfMonth(month)\n  const monthEnd = dateFns.endOfMonth(monthStart)\n  const startDate = dateFns.startOfWeek(monthStart)\n  const endDate = dateFns.endOfWeek(monthEnd)\n\n  const dateFormat = \"d\"\n  const rows = []\n\n  let days = []\n  let day = startDate\n  let formattedDate = \"\"\n\n  while(day <= endDate){\n    for(let i = 0; i<7; i++){\n      formattedDate = dateFns.format(day, dateFormat)\n      const cloneDay = day\n      days.push(\n        <CalendarDate formattedDate = {formattedDate} day={cloneDay} monthStart={monthStart} setDates={setDates} dates={dates}/>\n      )\n      day = dateFns.addDays(day, 1)\n    }\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    )\n    days=[]\n  }\n\n  return(\n    <div className=\"body\">{rows}</div>\n  )\n\n}\n\nconst CalendarDate = ({formattedDate, day, monthStart,setDates, dates}) => {\n\n  const [ clicked, setClicked ] = useState(false)\n\n  const onDateClick = day => {\n    setClicked(!clicked)\n    setDates(dates.concat(day.toString()))\n  }\n\n  if(clicked){\n    return(\n      <div\n      className={`col cell clicked`}\n      key={day}\n      onClick = {() => onDateClick(day)}\n    >\n      <span className=\"number\">{formattedDate}</span>\n      <span className=\"bg\">{formattedDate}</span>\n    </div>\n    )\n  }\n  return(\n    <div\n    className={`col cell ${!dateFns.isSameMonth(day, monthStart) ? \"disabled\" : \"\"}`}\n    key={day}\n    onClick = {() => onDateClick(day)}\n  >\n    <span className=\"number\">{formattedDate}</span>\n    <span className=\"bg\">{formattedDate}</span>\n  </div>\n  )\n}\n\nexport default ChoiceCalendar","import React, {useState} from 'react';\nimport { Formik } from 'formik';\nimport { useMutation, useQuery } from '@apollo/client'\nimport { ADD_EVENT} from '../graphql/mutations'\nimport {USER_GROUPS} from '../graphql/queries'\nimport Select from 'react-select'\nimport ChoiceCalendar from './ChoiceCalendar'\n\n const AddEvent = () => {\n  const [ dates, setDates] = useState([])\n  const [choice, setChoice] = useState(null)\n  const handleChoice = selectedOption => {\n    setChoice(selectedOption.value)\n  }\n   const groups = useQuery(USER_GROUPS)\n   let options = []\n   if(groups.data){\n    options = groups.data.userGroups.map(group =>(\n      {value: group.name, label: group.name}\n    ))\n   }\n   const [addEvent ] = useMutation(ADD_EVENT)\n   return( \n   <div>\n     <h1>New Event</h1>\n     <Formik\n       initialValues={{ name: '' }}\n       onSubmit={({name}, {resetForm}) => {\n         addEvent({variables:{name, group: choice, dates}})\n         resetForm({})\n       }}\n     >\n       {({\n         values,\n         errors,\n         touched,\n         handleChange,\n         handleBlur,\n         handleSubmit\n         /* and other goodies */\n       }) => (\n         <form onSubmit={handleSubmit}>\n           event name: <input\n             type=\"text\"\n             name=\"name\"\n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.name}\n           />\n           <button type=\"submit\">\n             Submit\n           </button>\n         </form>\n       )}\n     </Formik>\n     <Select options={options} onChange={handleChoice} />\n     <h2>Choose possible days</h2>\n     <ChoiceCalendar dates={dates} setDates={setDates}/>\n   </div>\n )};\n \n\nexport default AddEvent","import React, { useEffect } from 'react';\nimport { Formik } from 'formik';\nimport { useMutation } from '@apollo/client'\nimport {LOGIN} from '../graphql/mutations'\n \n const Login = ({setToken}) => {\n\n  const [ login, result ] = useMutation(LOGIN)\n\n  useEffect(() => {\n    if(result.data){\n      const token = result.data.login.value\n      setToken(token)\n      localStorage.setItem('user-token', token)\n    }\n  }, [result.data])\n\n  return(\n   <div>\n     <h1>Login</h1>\n     <Formik\n       initialValues={{ username: '', password: '' }}\n       onSubmit={({username, password}, {resetForm}) => {\n         login({ variables: {username, password}})\n         resetForm({values: {username: '', password: ''}})\n       }}\n     >\n       {({\n         values,\n         errors,\n         touched,\n         handleChange,\n         handleBlur,\n         handleSubmit\n         /* and other goodies */\n       }) => (\n         <form onSubmit={handleSubmit}>\n           username: <input\n             type=\"text\"\n             name=\"username\"\n             onChange={handleChange}\n             onBlur={handleBlur}\n             value={values.username}\n           />\n\n           <br/>\n\n           password: <input\n           type= \"password\"\n           name=\"password\"\n           onChange={handleChange}\n           onBlur={handleBlur}\n           value={values.password}\n           />\n           <br/>\n           <button type=\"submit\">\n             Submit\n           </button>\n         </form>\n       )}\n     </Formik>\n   </div>\n  )};\n \n\nexport default Login","import PreviewCalendar from \"./components/PreviewCalendar\"\nimport AddEvent from './components/AddEvent'\nimport Login from './components/Login'\nimport {BrowserRouter as Router, Switch, Route, Link, useParams, useHistory} from 'react-router-dom'\nimport { useEffect, useState } from 'react'\nimport { useApolloClient, useQuery } from \"@apollo/client\"\nimport Button from 'react-bootstrap/Button';\n\n\nconst App = () => {\n  const [ token, setToken ] = useState(localStorage.getItem('user-token'))\n  const client = useApolloClient()\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  if(!token){\n    return(\n      <Login setToken={setToken}/>\n    )\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/addevent\">\n          <AddEvent/>\n        </Route>\n        <Route path=\"/\">\n          <PreviewCalendar/>\n          <Button><Link to=\"/addevent\">add event</Link></Button>\n          <button onClick={logout}>Log Out</button>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache, gql } from '@apollo/client'\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('user-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: '/graphql' })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n<ApolloProvider client={client}>\n  <App />\n</ApolloProvider>, \ndocument.getElementById('root'))\n"],"sourceRoot":""}